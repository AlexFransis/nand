// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /**
     * 16 BIT INSTRUCTION
     * I XX A CCCCCC DDD JJJ
     *
     * I = A OR C INSTRUCTION 	=> instruction[15]
     * X = UNUSED
     * A = @A or M[A] 			=> instruction[12]
     * C = COMPUTATION FUNCTION	=> instruction[6..11]
     * D = OUTPUT DESTINATION	=> instruction[3..5]
     * J = JUMP DESTINATION		=> instruction[0..2]
     *
     */

    // --------------- M[A] OR @A --------------
    Mux16(a=aOut, b=inM, sel=instruction[12], out=mAOrA); // A1

    // --------------- COMPUTE -----------------
    And(a=instruction[11], b=instruction[15], out=zx); // C1
    And(a=instruction[10], b=instruction[15], out=nx); // C2
    And(a=instruction[9], b=instruction[15], out=zy);  // C3
    And(a=instruction[8], b=instruction[15], out=ny);  // C4
    And(a=instruction[7], b=instruction[15], out=f);   // C5
    And(a=instruction[6], b=instruction[15], out=no);  // C6
    ALU(x=dOut, y=mAOrA, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=aluOut, out=outM, zr=zr, ng=neg);

    // ------------- POSITIVE OUT --------------
    Or(a=zr, b=neg, out=notPos);
    Not(in=notPos, out=pos);

    // --------------- A REG ---------------
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aInstruction);
	Not(in=instruction[15], out=notInstruction);
    Or(a=notInstruction, b=instruction[5], out=loadA);
    ARegister(in=aInstruction, load=loadA, out=aOut, out[0..14]=addressM); // D1

    // --------------- D REG ---------------
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=dOut); // D2

    // --------------- M[A] ----------------
    And(a=instruction[15], b=instruction[3], out=writeM); // D3

    // ------------- JMP BITS --------------
    And(a=instruction[0], b=pos, out=j1); // J1
    And(a=instruction[1], b=zr, out=j2);  // J2
    And(a=instruction[2], b=neg, out=j3); // J3

	Or(a=j1, b=j2, out=j12);
	Or(a=j12, b=j3, out=j123);
	And(a=instruction[15], b=j123, out=jmp);

    // ------------- PC --------------
	PC(in=aOut, load=jmp, reset=reset, inc=true, out[0..14]=pc);
}
