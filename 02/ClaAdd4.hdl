/**
 * This chip will add two 4 bit numbers using the carry lookahead method
 * instead of carry riple method
 */

CHIP LookAheadAdd4 {
	IN a[4], b[4];
	OUT out[4], carry;

	PARTS:
	Not(in=true, out=c0);

	/* c1 */
	Or(a=a[0], b=b[0], out=p0); /* propagate */
	And(a=a[0], b=b[0], out=g0); /* generate */
	And(a=p0, b=c0, out=p0c0);
	Or(a=g0, b=p0c0, out=c1);
	/* sum */
	Xor(a=a[0], b=b[0], out=xorab0);
	Xor(a=xorab0, b=c0, out=out[0]);

	/* c2 */
	Or(a=a[1], b=b[1], out=p1); /* propagate */
	And(a=a[1], b=b[1], out=g1); /* generate */
	And(a=p1, b=p0c0, out=p1p0c0);
	And(a=p1, b=g0, out=p1g0);
	Or(a=g1, b=p1g0, out= g1p1g0);
	Or(a=g1p1g0, b=p1p0c0, out= c2);
	/* sum */
	Xor(a=a[1], b=b[1], out=xorab1);
	Xor(a=xorab1, b=c1, out=out[1]);

	/* c3 */
	Or(a=a[2], b=b[2], out=p2); /* propagate */
	And(a=a[2], b=b[2], out=g2); /* generate */
	And(a=p2, b=p1p0c0, out=p2p1p0c0);
	And(a=p2, b=p1g0, out=p2p1g0);
	And(a=p2, b=g1, out=p2g1);
	Or(a=g2, b=p2g1, out=c3or1);
	Or(a=c3or1, b=p2p1g0, out=c3or2);
	Or(a=c3or2, b=p2p1p0c0, out=c3);
	/* sum */
	Xor(a=a[2], b=b[2], out=xorab2);
	Xor(a=xorab2, b=c2, out=out[2]);


	/* c4 */
	Or(a=a[3], b=b[3], out=p3); /* propagate */
	And(a=a[3], b=b[3], out=g3); /* generate */
	And(a=p3, b=p2p1p0c0, out=p3p2p1p0c0);
	And(a=p3, b=g2, out=p3g2);
	And(a=p3, b=p2, out=p3p2);
	And(a=p3p2, b=g1, out=p3p2g1);
	And(a=p3p2, b=p1, out=p3p2p1);
	And(a=p3p2p1, b=g0, out=p3p2p1g0);
	Or(a=g3, b=p3g2, out=c4or1);
	Or(a=c4or1, b=p3p2g1, out=c4or2);
	Or(a=c4or2, b=p3p2p1g0, out=c4or3);
	Or(a=c4or3, b=p3p2p1p0c0, out=carry);
	/* sum */
	Xor(a=a[3], b=b[3], out=xorab3);
	Xor(a=xorab3, b=c3, out=out[3]);
}
