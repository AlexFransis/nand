/**
 * This chip will add two 4 bit numbers using the carry lookahead method
 * instead of carry riple method
 */

CHIP ClaAdd4 {
	IN a[4], b[4], cin;
	OUT out[4], carry;

	PARTS:
	Or(a=a[0], b=b[0], out=p0); /* propagate */
	And(a=a[0], b=b[0], out=g0); /* generate */
	/* c1 */
	And(a=p0, b=cin, out=p0c0);
	Or(a=g0, b=p0c0, out=c1);
	/* sum0 */
	Xor(a=a[0], b=b[0], out=xorab0);
	Xor(a=xorab0, b=cin, out=out[0]);

	Or(a=a[1], b=b[1], out=p1); /* propagate */
	And(a=a[1], b=b[1], out=g1); /* generate */
	/* c2 */
	And(a=p1, b=c1, out=p1c1);
	Or(a=g1, b=p1c1, out= c2);
	/* sum1 */
	Xor(a=a[1], b=b[1], out=xorab1);
	Xor(a=xorab1, b=c1, out=out[1]);

	Or(a=a[2], b=b[2], out=p2); /* propagate */
	And(a=a[2], b=b[2], out=g2); /* generate */
	/* c3 */
	And(a=p2, b=c2, out=p2c2);
	Or(a=g2, b=p2c2, out=c3);
	/* sum2 */
	Xor(a=a[2], b=b[2], out=xorab2);
	Xor(a=xorab2, b=c2, out=out[2]);


	Or(a=a[3], b=b[3], out=p3); /* propagate */
	And(a=a[3], b=b[3], out=g3); /* generate */
	/* c4 */
	And(a=p3, b=c3, out=p3c3);
	Or(a=g3, b=p3c3, out=carry);
	/* sum3 */
	Xor(a=a[3], b=b[3], out=xorab3);
	Xor(a=xorab3, b=c3, out=out[3]);
}
