// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    // heap range 2048 - 16383 = 0x0800 - 0x3FFF
    static int BASE_RAM_ADDR;
    static int BASE_HEAP_ADDR;
    static int MAX_HEAP_ADDR;
    static int FREE_LENGTH;
    static int FREE_NEXT;
    static int ALLOC_LENGTH;
    static Array FreeList;


    /** Initializes the class. */
    function void init() {
    	// FreeList[0] = length of current free block
    	// FreeList[1] = pointer to next free block
        let BASE_RAM_ADDR = 0;
    	let BASE_HEAP_ADDR = 2048;
    	let MAX_HEAP_ADDR = 16383;
    	let FREE_LENGTH = 0;
    	let FREE_NEXT = 1;
    	let ALLOC_LENGTH = 1;

    	let FreeList = BASE_HEAP_ADDR;
	let FreeList[FREE_LENGTH] = MAX_HEAP_ADDR - BASE_HEAP_ADDR; // length of the initial block
	let FreeList[FREE_NEXT] = null;
	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return BASE_RAM_ADDR[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let BASE_RAM_ADDR[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
    	var Array freeBlock;
    	var Array allocatedBlock;
    	var boolean foundFreeBlock;

    	let freeBlock = FreeList;
    	let foundFreeBlock = false;

    	// traverse FreeList for first fit
    	while (~foundFreeBlock & ~(freeBlock[FREE_NEXT] = null)) {
    	    if (freeBlock[FREE_LENGTH] > (size + 1)) {
                let foundFreeBlock = true;
    	    }

            let freeBlock = freeBlock[FREE_NEXT];
    	}

        if (~foundFreeBlock) {
            // TODO: DEFRAG HERE
        }

    	// splice free block to allocate memory
	let freeBlock[FREE_LENGTH] = freeBlock[FREE_LENGTH] - (size + 1);
 	// address of allocated block is adreess of free block + size
	let allocatedBlock = freeBlock + size;
	// save size of allocated memory
	let allocatedBlock[ALLOC_LENGTH] = size + 1;

	return allocatedBlock;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // insert freed block using an address order policy
        // addr(prev) < addr(freed object) < addr(next)
        var int currBlockAddr;
        let currBlockAddr = FreeList;
        while (currBlockAddr[FREE_NEXT] < o) {
            let currBlockAddr = currBlockAddr[FREE_NEXT];
        }

        // insert freed object in between currentBlock and the next block
        // currBlock -> freedObject -> nextFree
        let o[0] = currBlockAddr[FREE_NEXT];
        let currBlockAddr[FREE_NEXT] = o[ALLOC_LENGTH];
        return;
    }
}
